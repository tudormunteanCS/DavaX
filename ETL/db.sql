-- ====================================================
-- STAR SCHEMA: Table Creation + Sample Data (INT IDs)
-- ====================================================
 
SET SERVEROUTPUT ON
-- ========== DIMENSION TABLES ==========
 
-- Employee_DIM
CREATE TABLE Employee_DIM (
    EmployeeID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName       VARCHAR2(100),
    LastName        VARCHAR2(100),
    Email           VARCHAR2(255),
    PhoneNumber     VARCHAR2(50),
    Country         VARCHAR2(100),
    DeliveryUnit    VARCHAR2(100),
    Grade           VARCHAR2(50),
    Manager_         VARCHAR2(100)
);
 
-- Project_DIM
CREATE TABLE Project_DIM (
    ProjectID       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProjectCode     VARCHAR2(100)
);
 
-- Tasks_DIM
CREATE TABLE Tasks_DIM (
    TaskID          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TaskDescription VARCHAR2(255)
);
 
-- TimeTypes_DIM
CREATE TABLE TimeTypes_DIM (
    TimeTypeID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TimeTypeName    VARCHAR2(100)
);
 
-- Date_DIM
CREATE TABLE Date_DIM (
    DateID          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Day_             NUMBER(2),
    Week            NUMBER(2),
    MonthString     VARCHAR2(20),
    MonthInt        NUMBER(2),
    Year_            NUMBER(4)
);
CREATE OR REPLACE PROCEDURE plch_proc
IS
   my_exception   EXCEPTION;
BEGIN
   RAISE my_exception;
END;
/

BEGIN
   plch_proc;
EXCEPTION
   WHEN my_exception
   THEN
      DBMS_OUTPUT.put_line (SQLCODE);
END;
/

select * from Date_dim
 
-- Meeting_DIM
CREATE TABLE Meeting_DIM (
    MeetingID       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MeetingName     VARCHAR2(255),
    StartTime       DATE,
    EndTime         DATE
);
 
 
-- Absence_Planned_DIM
CREATE TABLE Absence_Planned_DIM (
    AbsenceID       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Subject         VARCHAR2(255),
    Categories      VARCHAR2(100),
    Description_     VARCHAR2(500),
    StartTime       DATE,
    EndTime         DATE
);
 
 
-- Anual_Leave_DIM
CREATE TABLE Anual_Leave_DIM (
    AnualLeaveID    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Type_            VARCHAR2(100),
    StartDate       DATE,
    EndDate         DATE
);
 
-- ========== FACT TABLE ==========
 
CREATE TABLE Integration_Fact (
    EntryID         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DateID          NUMBER,
    EmployeeID      NUMBER,
    MeetingID       NUMBER,
    ProjectID       NUMBER,
    TaskID          NUMBER,
    AbsenceID       NUMBER,
    TimeTypeID      NUMBER,
    AnualLeaveID    NUMBER,
    Hours_           NUMBER(5,2),
    ApprovalStatus  VARCHAR2(50),
    CreatedAt       DATE,
    UpdatedAt       DATE,
 
    CONSTRAINT fk_date       FOREIGN KEY (DateID)         REFERENCES Date_DIM(DateID),
    CONSTRAINT fk_employee   FOREIGN KEY (EmployeeID)     REFERENCES Employee_DIM(EmployeeID),
    CONSTRAINT fk_meeting    FOREIGN KEY (MeetingID)      REFERENCES Meeting_DIM(MeetingID),
    CONSTRAINT fk_project    FOREIGN KEY (ProjectID)      REFERENCES Project_DIM(ProjectID),
    CONSTRAINT fk_task       FOREIGN KEY (TaskID)         REFERENCES Tasks_DIM(TaskID),
    CONSTRAINT fk_absence    FOREIGN KEY (AbsenceID)      REFERENCES Absence_Planned_DIM(AbsenceID),
    CONSTRAINT fk_timetype   FOREIGN KEY (TimeTypeID)     REFERENCES TimeTypes_DIM(TimeTypeID),
    CONSTRAINT fk_anualleave FOREIGN KEY (AnualLeaveID)   REFERENCES Anual_Leave_DIM(AnualLeaveID)
);

ALter table Integration_Fact
DROP CONSTRAINT fk_meeting
 
ALTER TABLE Integration_Fact
ADD CONSTRAINT fk_meeting_from_staging
FOREIGN KEY (MeetingID)
REFERENCES StagingAttendanceSummary (meeting_id);



 

 
CREATE TABLE StagingAttendanceSummary (
    meeting_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    meeting_name VARCHAR2(255),
    attended_participants NUMBER,
    start_time DATE,
    end_date DATE,
    meeting_duration NUMBER
);
 
CREATE TABLE StagingAttendance (
    staging_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    meeting_id NUMBER,
    first_join DATE,
    last_join DATE,
    in_meeting_duration NUMBER,
    role_employee VARCHAR2(255),
 
    CONSTRAINT fk_meeting_id FOREIGN KEY (meeting_id)
        REFERENCES StagingAttendanceSummary(meeting_id)
);
ALTER TABLE StagingAttendance
ADD (name VARCHAR2(255));
ALTER TABLE StagingAttendance
ADD (email VARCHAR2(255));
select * from StagingAttendance;

INSERT into StagingAttendance(
meeting_id,
name,
first_join,
last_join,
in_meeting_duration,
email,
role_employee)
Values
(
6,'name',to_date('25-JUN-25','DD-MON-RR'),to_date('25-JUN-25','DD-MON-RR'),1.66,'email','Presenter');
)
truncate table StagingAttendance;
SELECT * FROM StagingAttendance;

 
CREATE TABLE StagingAbsence (
    absence_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    subject            VARCHAR2(255),
    start_date         DATE,
    start_time         DATE,
    end_date           DATE,
    end_time           DATE,
    all_day_event      CHAR(1) CHECK (all_day_event IN ('Y', 'N')),
    meeting_organizer  VARCHAR2(255),
    categories         VARCHAR2(255),
    description_        VARCHAR2(255),
    location_           VARCHAR2(255)
);
 
 SELECT * FROM StagingAttendanceSummary;
 select * from Employee_Dim;
 
 select * from StagingAttendance;
 select * from Date_dim;
 
CREATE OR REPLACE PROCEDURE staging_attendance_to_fact
AS
BEGIN
    INSERT INTO Integration_Fact (
        DateID, EmployeeID, MeetingID, ProjectID, TaskID,
        AbsenceID, TimeTypeID, AnualLeaveID,
        Seconds, ApprovalStatus, CreatedAt, UpdatedAt
    )
    SELECT
        NULL,
        (SELECT EmployeeID FROM Employee_Dim ed WHERE ed.Email = sa.Email),
        sa.meeting_id,
        NULL, NULL, NULL, NULL, NULL,
        sa.in_meeting_duration,
        NULL,
        NULL,
        NULL
    FROM StagingAttendance sa;

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE Insert_Absence_And_Link_Fact
IS
    v_absence_id NUMBER;
    v_hours      NUMBER;
BEGIN
    FOR rec IN (
        SELECT * FROM StagingAbsence
    ) LOOP
        -- Calculate integer hours from EndTime - StartTime
        SELECT FLOOR(
            (EXTRACT(DAY FROM rec.End_Time - rec.Start_Time) * 24) +
            (EXTRACT(HOUR FROM rec.End_Time - rec.Start_Time)) +
            (EXTRACT(MINUTE FROM rec.End_Time - rec.Start_Time) / 60) +
            (EXTRACT(SECOND FROM rec.End_Time - rec.Start_Time) / 3600)
        )
        INTO v_hours
        FROM dual;

        -- Insert into Absence_Planned_DIM
        INSERT INTO Absence_Planned_DIM (
            Subject,
            Categories,
            Description,
            StartTime,
            EndTime
        )
        VALUES (
            rec.Subject,
            rec.Categories,
            rec.Description_Absence,
            rec.Start_Time,
            rec.End_Time
        )
        RETURNING AbsenceID INTO v_absence_id;

        -- Insert into Integration_Fact
        INSERT INTO Integration_Fact (
            EmployeeID,
            AbsenceID,
            Hours,
            ApprovalStatus,
            CreatedAt,
            UpdatedAt,
            DateID,
            MeetingID,
            ProjectID,
            TaskID,
            TimeTypeID,
            AnualLeaveID
        )
        VALUES (
            rec.EmployeeID,
            v_absence_id,
            v_hours,
            'Approved',
            SYSDATE,
            SYSDATE,
            NULL, NULL, NULL, NULL, NULL,
            NULL
        );
    END LOOP;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('âœ” Absences loaded into Integration_Fact with integer hours and timestamps.');
END;
/
 


select * from MEETING_DIM
select * from Integration_fact;
Truncate table Integration_fact;

select * from StagingAttendance;
select distinct meeting_id from StagingAttendanceSummary;
select * from StagingAttendanceSummary

begin
staging_attendance_to_fact;
end;



SELECT DISTINCT meeting_id
FROM StagingAttendance
WHERE meeting_id IS NOT NULL
AND meeting_id NOT IN (SELECT meeting_id FROM StagingAttendanceSummary);


/